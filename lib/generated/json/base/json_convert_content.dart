// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:xiaowu/entity/remind_entity.dart';
import 'package:xiaowu/generated/json/remind_entity_helper.dart';
import 'package:xiaowu/entity/weather_entity.dart';
import 'package:xiaowu/generated/json/weather_entity_helper.dart';
import 'package:xiaowu/entity/banner_entity.dart';
import 'package:xiaowu/generated/json/banner_entity_helper.dart';
import 'package:xiaowu/entity/category_entity.dart';
import 'package:xiaowu/generated/json/category_entity_helper.dart';
import 'package:xiaowu/entity/user_entity.dart';
import 'package:xiaowu/generated/json/user_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<dynamic, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case RemindEntity:
				return remindEntityFromJson(data as RemindEntity, json) as T;
			case WeatherEntity:
				return weatherEntityFromJson(data as WeatherEntity, json) as T;
			case WeatherRealTimeWeather:
				return weatherRealTimeWeatherFromJson(data as WeatherRealTimeWeather, json) as T;
			case WeatherLocation:
				return weatherLocationFromJson(data as WeatherLocation, json) as T;
			case WeatherForecasts:
				return weatherForecastsFromJson(data as WeatherForecasts, json) as T;
			case BannerEntity:
				return bannerEntityFromJson(data as BannerEntity, json) as T;
			case CategoryEntity:
				return categoryEntityFromJson(data as CategoryEntity, json) as T;
			case CategoryServerItemInfo:
				return categoryServerItemInfoFromJson(data as CategoryServerItemInfo, json) as T;
			case CategoryServerItemInfoServerItemInfoVideoList:
				return categoryServerItemInfoServerItemInfoVideoListFromJson(data as CategoryServerItemInfoServerItemInfoVideoList, json) as T;
			case CategoryServerItemInfoServerItemInfoImageCardList:
				return categoryServerItemInfoServerItemInfoImageCardListFromJson(data as CategoryServerItemInfoServerItemInfoImageCardList, json) as T;
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case RemindEntity:
				return remindEntityToJson(data as RemindEntity);
			case WeatherEntity:
				return weatherEntityToJson(data as WeatherEntity);
			case WeatherRealTimeWeather:
				return weatherRealTimeWeatherToJson(data as WeatherRealTimeWeather);
			case WeatherLocation:
				return weatherLocationToJson(data as WeatherLocation);
			case WeatherForecasts:
				return weatherForecastsToJson(data as WeatherForecasts);
			case BannerEntity:
				return bannerEntityToJson(data as BannerEntity);
			case CategoryEntity:
				return categoryEntityToJson(data as CategoryEntity);
			case CategoryServerItemInfo:
				return categoryServerItemInfoToJson(data as CategoryServerItemInfo);
			case CategoryServerItemInfoServerItemInfoVideoList:
				return categoryServerItemInfoServerItemInfoVideoListToJson(data as CategoryServerItemInfoServerItemInfoVideoList);
			case CategoryServerItemInfoServerItemInfoImageCardList:
				return categoryServerItemInfoServerItemInfoImageCardListToJson(data as CategoryServerItemInfoServerItemInfoImageCardList);
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (RemindEntity).toString()){
			return RemindEntity().fromJson(json);
		}
		if(type == (WeatherEntity).toString()){
			return WeatherEntity().fromJson(json);
		}
		if(type == (WeatherRealTimeWeather).toString()){
			return WeatherRealTimeWeather().fromJson(json);
		}
		if(type == (WeatherLocation).toString()){
			return WeatherLocation().fromJson(json);
		}
		if(type == (WeatherForecasts).toString()){
			return WeatherForecasts().fromJson(json);
		}
		if(type == (BannerEntity).toString()){
			return BannerEntity().fromJson(json);
		}
		if(type == (CategoryEntity).toString()){
			return CategoryEntity().fromJson(json);
		}
		if(type == (CategoryServerItemInfo).toString()){
			return CategoryServerItemInfo().fromJson(json);
		}
		if(type == (CategoryServerItemInfoServerItemInfoVideoList).toString()){
			return CategoryServerItemInfoServerItemInfoVideoList().fromJson(json);
		}
		if(type == (CategoryServerItemInfoServerItemInfoImageCardList).toString()){
			return CategoryServerItemInfoServerItemInfoImageCardList().fromJson(json);
		}
		if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<RemindEntity>[] is M){
			return data.map<RemindEntity>((e) => RemindEntity().fromJson(e)).toList() as M;
		}
		if(<WeatherEntity>[] is M){
			return data.map<WeatherEntity>((e) => WeatherEntity().fromJson(e)).toList() as M;
		}
		if(<WeatherRealTimeWeather>[] is M){
			return data.map<WeatherRealTimeWeather>((e) => WeatherRealTimeWeather().fromJson(e)).toList() as M;
		}
		if(<WeatherLocation>[] is M){
			return data.map<WeatherLocation>((e) => WeatherLocation().fromJson(e)).toList() as M;
		}
		if(<WeatherForecasts>[] is M){
			return data.map<WeatherForecasts>((e) => WeatherForecasts().fromJson(e)).toList() as M;
		}
		if(<BannerEntity>[] is M){
			return data.map<BannerEntity>((e) => BannerEntity().fromJson(e)).toList() as M;
		}
		if(<CategoryEntity>[] is M){
			return data.map<CategoryEntity>((e) => CategoryEntity().fromJson(e)).toList() as M;
		}
		if(<CategoryServerItemInfo>[] is M){
			return data.map<CategoryServerItemInfo>((e) => CategoryServerItemInfo().fromJson(e)).toList() as M;
		}
		if(<CategoryServerItemInfoServerItemInfoVideoList>[] is M){
			return data.map<CategoryServerItemInfoServerItemInfoVideoList>((e) => CategoryServerItemInfoServerItemInfoVideoList().fromJson(e)).toList() as M;
		}
		if(<CategoryServerItemInfoServerItemInfoImageCardList>[] is M){
			return data.map<CategoryServerItemInfoServerItemInfoImageCardList>((e) => CategoryServerItemInfoServerItemInfoImageCardList().fromJson(e)).toList() as M;
		}
		if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}